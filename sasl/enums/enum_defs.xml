<?xml version="1.0" encoding="utf-8"?>
<enums>
	<enum name="operators">
		<HasName />
		<Ortho />
		<AutoGen expression= "$index$" />
		<item>none</item>
		
		<item>add</item>
		<item>sub</item>
		<item>mul</item>
		<item>div</item>
		<item>mod</item>
		
		<item>assign</item>
		<item>add_assign</item>
		<item>sub_assign</item>
		<item>mul_assign</item>
		<item>div_assign</item>
		<item>mod_assign</item>
		
		<item>bit_not_assign</item>
		<item>bit_and_assign</item>
		<item>bit_or_assign</item>
		<item>bit_xor_assign</item>
		
		<item>lshift_assign</item>
		<item>rshift_assign</item>
		
		<item>equal</item>
		<item>not_equal</item>
		<item>less</item>
		<item>less_equal</item>
		<item>greater</item>
		<item>greater_equal</item>
		
		<item>left_shift</item>
		<item>right_shift</item>
		
		<item value = "1 * (2 ** 16)">unary_op</item>
		<item value = "1 * (2 ** 24) + $unary_op$">postfix_op</item>
		<item>prefix_incr</item>
		<item>prefix_decr</item>
		<item value = "$postfix_op$ + $prefix_incr$">postfix_incr</item>
		<item value = "$postfix_op$ + $prefix_decr$">postfix_decr</item>
		<item value = "$add$ + $unary_op$">positive</item>
		<item value = "$sub$ + $unary_op$">negative</item>
		
		<item>logic_or</item>
		<item>logic_and</item>
		<item>logic_not</item>
		
		<item>bit_and</item>
		<item>bit_or</item>
		<item>bit_xor</item>
		<item>bit_not</item>
	</enum>
	
	<enum name="token_types">
		<HasName/>
		<Convertible/>
		<AutoGen expression="$index$+1"/>
		<item>_keyword</item>
		<item>_identifier</item>
		<item>_constant</item>
		<item>_operator</item>
		<item>_whitespace</item>
		<item>_preprocessor</item>
		<item>_comment</item>
		<item>_newline</item>
	</enum>
	
	<enum name="literal_constant_types">
		<HasName />
		<AutoGen expression="$index$+1" />
		<item>none</item>
		<item>boolean</item>
		<item>integer</item>
		<item>real</item>
		<item>string</item>
		<item>character</item>
	</enum>	
	
	<enum name="buildin_type_code">
		<HasName />
		<Ortho />
		<item value="0">none</item>
		
		<item value="1 * (2 ** 24)">_scalar</item>
		<item value="2 * (2 ** 24)">_vector</item>
		<item value="4 * (2 ** 24)">_matrix</item>
		
		<item value="1 * (2 ** 16)">_real</item>
		<item value="2 * (2 ** 16)">_integer</item>
		<item value="3 * (2 ** 16)">_boolean</item>
		
		<item value="1 * (2 ** 8) + $_integer$">_unsigned</item>
		<item value="2 * (2 ** 8) + $_integer$">_signed</item>
		
		<item value="1 + $_signed$">_sint8</item>
		<item value="2 + $_signed$">_sint16</item>
		<item value="3 + $_signed$">_sint32</item>
		<item value="4 + $_signed$">_sint64</item>
		
		<item value="1 + $_unsigned$">_uint8</item>
		<item value="2 + $_unsigned$">_uint16</item>
		<item value="3 + $_unsigned$">_uint32</item>
		<item value="4 + $_unsigned$">_uint64</item>
		
		<item value="1 + $_real$">_float</item>
		<item value="2 + $_real$">_double</item>
	</enum>
	
	<enum name="syntax_node_types" storage_type = "uint64_t">
		<HasName/>
		<Convertible/>
		<Ortho/>
		<AutoGen expression = "$index$+1"/>
		<item value="0">node</item>
		
		<item value = "1 * (2 ** 48)">declaration</item>
		<item value = "2 * (2 ** 48)">expression</item>
		<item value = "3 * (2 ** 48)">statement</item>
		<item value = "4 * (2 ** 48)">initializer</item>
		<item value = "5 * (2 ** 48)">identifier</item>
		<item value = "6 * (2 ** 48)">program</item>
		
		<item value = "$declaration$ + 1 * (2 ** 32)">type_specifier</item>
		<item value = "$declaration$ + 1">variable_declaration</item>
		<item value = "$declaration$ + 2">typedef_definition</item>
		<item value = "$declaration$ + 3">parameter</item>
		
		<let var = "expression_start" value = "$index$-1"/>
		<lazylet var = "expr_index" value = "$expression$ + $index$ - $expression_start$"/>
		<item value = "$expr_index$">constant_expression</item>
		<item value = "$expr_index$">unary_expression</item>
		<item value = "$expr_index$">cast_expression</item>
		<item value = "$expr_index$">binary_expression</item>
		<item value = "$expr_index$">expression_list</item>
		<item value = "$expr_index$">cond_expression</item>
		<item value = "$expr_index$">index_expression</item>
		<item value = "$expr_index$">call_expression</item>
		<item value = "$expr_index$">member_expression</item>
		
		<item value = "$type_specifier$ + 1">buildin_type</item>
		<item value = "$type_specifier$ + 2">qualified_type</item>
		<item value = "$type_specifier$ + 3">array_type</item>
		<item value = "$type_specifier$ + 4">struct_type</item>
		<item value = "$type_specifier$ + 5">function_type</item>

		<item value = "$statement$ + 1">declaration_statement</item>
		<item value = "$statement$ + 2">if_statement</item>
		<item value = "$statement$ + 3">while_statement</item>
		<item value = "$statement$ + 4">dowhile_statement</item>
		<item value = "$statement$ + 5">switch_statement</item>
		<item value = "$statement$ + 6">compound_statement</item>
		<item value = "$statement$ + 7">expression_statement</item>
		<item value = "$statement$ + 8">jump_statement</item>
		<item value = "$statement$ + 9">for_statement</item>

		<item value = "$initializer$ + 1">expression_initializer</item>
		<item value = "$initializer$ + 2">member_initializer</item>
	</enum>
	
	<enum name="type_types">
		<HasName/>
		<Convertible/>
		<AutoGen expression = "$index$"/>
		<item>none</item>
		<item>buildin</item>
		<item>composited</item>
		<item>alias</item>
	</enum>
	<enum name="storage_mode">
		<HasName/>
		<Convertible/>
		<AutoGen expression = "$index$"/>
		<item>none</item>
		<item>constant</item>
		<item>register_id</item>
		<item>stack_based_address</item>
	</enum>
	
	<enum name="type_qualifiers">
		<HasName />
		<Ortho/>
		<Convertible/>
		<AutoGen expression = "2 ** $index$"/>
		<item>none</item>
		<item>_uniform</item>
	</enum>
	
	<enum name="jump_mode">
		<HasName />
		<AutoGen expression = "$index$" />
		<item>none</item>
		<item>_break</item>
		<item>_continue</item>
		<item>_return</item>
	</enum>
	
	<enum name="compiler_informations">
		<HasName/>
		<Ortho/>
		<Convertible/>
		<AutoGen expression = "$index$"/>
		
		<item value="0">none</item>
		
		<item value="1 * (2 ** 24)" desc="Compile">_compile</item>
		<item value="2 * (2 ** 24)" desc="Link">_link</item>
		<item value="255*(2 ** 24)">_stage_mask</item> 
		
		<item value="1 * (2 ** 16)" desc="Warning">_warning</item>
		<item value="2 * (2 ** 16)" desc="Error">_error</item>
		<item value="4 * (2 ** 16)" desc="Message">_message</item>
		<item value="255*(2 ** 16)">_info_level_mask</item>
		
		<item value="65535">_info_id_mask</item>
		
		<let var="error_index_base" value="$index$-1"></let>
		<lazylet var="error_index" value = "$index$-$error_index_base$+$_error$+1000"/>
		<item value="$error_index$+$_compile$" desc="Type is redefined.">w_typedef_redefinition</item>
	</enum>
</enums>