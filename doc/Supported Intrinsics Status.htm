<html xmlns="http://www.w3.org/TR/REC-html40">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
    <title>Instrinsics</title>
    <style type="text/css">
        td {font-family:"Courier New"; font-size:9pt; line-height: 14pt}
        tr {margin-top: 4px}
        .style1
        {
            text-align: center;
        }
        .style2
        {
            font-weight: bold;
            text-align: center;
        }
        .style3
        {
            color: #333399;
        }
        .style4
        {
            font-weight: bold;
        }
        .COLOR0
        {
        	background-color: #FFFFFF
        }
        .COLOR1
        {
        	background-color: #DDDDFF
        }
    </style>
</head>
<body lang="zh-cn">
    <div>
        <table>
            <thead style="text-align: center; background-color: #DDDDDD">
                <tr>
                    <td class="style4">Name</td>
                    <td><b>Description</td>
                    <td><b>Min SM</b></td>
                    <td class="style2">Vertex Shader</td>
                    <td class="style2">Pixel Shader</td>
                </tr>
            </thead>
            <tbody id="body">
            <tr>
                <td class="style3">abort</td>
                <td>Terminates the current draw or dispatch call being executed.</td>
                <td>4</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">abs</td>
                <td>Absolute value (per component).</td>
                <td>11</td>
                <td class="style1">0.3.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">acos</td>
                <td>Returns the arccosine of each component of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">all</td>
                <td>Test if all components of x are nonzero.</td>
                <td>11</td>
                <td class="style1"><b>0.3.2</b></td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">AllMemoryBarrier</td>
                <td>Blocks execution of all threads in a group until all memory accesses have been
                            completed.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">AllMemoryBarrierWithGroupSync</td>
                <td>Blocks execution of all threads in a group until all memory accesses have been
                            completed and all threads in the group have reached this call.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">any</td>
                <td>Test if any component of x is nonzero.</td>
                <td>11</td>
                <td class="style2">0.3.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">asdouble</td>
                <td>Reinterprets a cast value into a double.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">asfloat</td>
                <td>Convert the input type to a float.</td>
                <td>4</td>
                <td class="style1">0.3.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">asin</td>
                <td>Returns the arcsine of each component of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">asint</td>
                <td>Convert the input type to an integer.</td>
                <td>4</td>
                <td class="style1">0.3.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">asuint</td>
                <td>Reinterprets the bit pattern of a 64-bit type to a uint.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">asuint</td>
                <td>Convert the input type to an unsigned integer.</td>
                <td>4</td>
                <td class="style1">0.3.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">atan</td>
                <td>Returns the arctangent of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">atan2</td>
                <td>Returns the arctangent of of two values (x,y).</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ceil</td>
                <td>Returns the smallest integer which is greater than or equal to x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">clamp</td>
                <td>Clamps x to the range [min, max].</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">clip</td>
                <td>Discards the current pixel, if any component of x is less than zero.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">cos</td>
                <td>Returns the cosine of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">cosh</td>
                <td>Returns the hyperbolic cosine of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">countbits</td>
                <td>Counts the number of bits (per component) in the input integer.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">cross</td>
                <td>Returns the cross product of two 3D vectors.</td>
                <td>11</td>
                <td class="style1">0.3</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">D3DCOLORtoUBYTE4</td>
                <td>Swizzles and scales components of the 4D vector xto compensate for the lack of
                            UBYTE4 support in some hardware.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ddx</td>
                <td>Returns the partial derivative of x with respect to the screen-space x-coordinate.</td>
                <td>21</td>
                <td class="style1">na</td>
                <td class="style1">0.2.5</td>
            </tr>
            <tr>
                <td class="style3">ddx_coarse</td>
                <td>Computes a low precision partial derivative with respect to the screen-space x-coordinate.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ddx_fine</td>
                <td>Computes a high precision partial derivative with respect to the screen-space
                            x-coordinate.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ddy</td>
                <td>Returns the partial derivative of x with respect to the screen-space y-coordinate.</td>
                <td>21</td>
                <td class="style1">na</td>
                <td class="style1">0.2.5</td>
            </tr>
            <tr>
                <td class="style3">ddy_coarse</td>
                <td>Computes a low precision partial derivative with respect to the screen-space y-coordinate.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ddy_fine</td>
                <td>Computes a high precision partial derivative with respect to the screen-space
                            y-coordinate.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">degrees</td>
                <td>Converts x from radians to degrees.</td>
                <td>11</td>
                <td class="style2">0.3.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">determinant</td>
                <td>Returns the determinant of the square matrix m.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">DeviceMemoryBarrier</td>
                <td>Blocks execution of all threads in a group until all device memory accesses have
                            been completed.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">DeviceMemoryBarrierWithGroupSync</td>
                <td>Blocks execution of all threads in a group until all device memory accesses have
                            been completed and all threads in the group have reached this call.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">distance</td>
                <td>Returns the distance between two points.</td>
                <td>11</td>
                <td class="style2">0.3.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">dot</td>
                <td>Returns the dot product of two vectors.</td>
                <td>1</td>
                <td class="style1">0.2</td>
                <td class="style1">0.2.2</td>
            </tr>
            <tr>
                <td class="style3">dst</td>
                <td>Calculates a distance vector.</td>
                <td>5</td>
                <td class="style1"><b>0.3.2</b></td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">errorf</td>
                <td>Submits an error message to the information queue.</td>
                <td>4</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">EvaluateAttributeAtCentroid</td>
                <td>Evaluates at the pixel centroid.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">EvaluateAttributeAtSample</td>
                <td>Evaluates at the indexed sample location.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">EvaluateAttributeSnapped</td>
                <td>Evaluates at the pixel centroid with an offset.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">exp</td>
                <td>Returns the base-e exponent.</td>
                <td>11</td>
                <td class="style2">0.3.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">exp2</td>
                <td>Base 2 exponent (per component).</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">f16tof32</td>
                <td>Converts the float16 stored in the low-half of the uint to a float.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">f32tof16</td>
                <td>Converts an input into a float16 type.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">faceforward</td>
                <td>Returns -n * sign(dot(i, ng)).</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">firstbithigh</td>
                <td>Gets the location of the first set bit starting from the highest order bit and
                            working downward, per component.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">firstbitlow</td>
                <td>Returns the location of the first set bit starting from the lowest order bit and
                            working upward, per component.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">floor</td>
                <td>Returns the greatest integer which is less than or equal to x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">fma</td>
                <td>Returns the double-precision fused multiply-addition of a * b + c.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">fmod</td>
                <td>Returns the floating point remainder of x/y.</td>
                <td>11</td>
                <td class="style2">0.3.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">frac</td>
                <td>Returns the fractional part of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">frexp</td>
                <td>Returns the mantissa and exponent of x.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">fwidth</td>
                <td>Returns abs(ddx(x)) + abs(ddy(x))</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">GetRenderTargetSampleCount</td>
                <td>Returns the number of render-target samples.</td>
                <td>4</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">GetRenderTargetSamplePosition</td>
                <td>Returns a sample position (x,y) for a given sample index.</td>
                <td>4</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">GroupMemoryBarrier</td>
                <td>Blocks execution of all threads in a group until all group shared accesses have
                            been completed.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">GroupMemoryBarrierWithGroupSync</td>
                <td>Blocks execution of all threads in a group until all group shared accesses have
                            been completed and all threads in the group have reached this call.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">InterlockedAdd</td>
                <td>Performs a guaranteed atomic add of value to the dest resource variable.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">InterlockedAnd</td>
                <td>Performs a guaranteed atomic and.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">InterlockedCompareExchange</td>
                <td>Atomically compares the input to the comparison value and exchanges the result.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">InterlockedCompareStore</td>
                <td>Atomically compares the input to the comparison value.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">InterlockedExchange</td>
                <td>Assigns value to dest and returns the original value.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">InterlockedMax</td>
                <td>Performs a guaranteed atomic max.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">InterlockedMin</td>
                <td>Performs a guaranteed atomic min.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">InterlockedOr</td>
                <td>Performs a guaranteed atomic or.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">InterlockedXor</td>
                <td>Performs a guaranteed atomic xor.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">isfinite</td>
                <td>Returns true if x is finite, false otherwise.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">isinf</td>
                <td>Returns true if x is +INF or -INF, false otherwise.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">isnan</td>
                <td>Returns true if x is NAN or QNAN, false otherwise.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ldexp</td>
                <td>Returns x * 2exp</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">length</td>
                <td>Returns the length of the vector v.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">lerp</td>
                <td>Returns x + s(y - x).</td>
                <td>11</td>
                <td class="style2">0.3.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">lit</td>
                <td>Returns a lighting vector (ambient, diffuse, specular, 1)</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">log</td>
                <td>Returns the base-e logarithm of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">log10</td>
                <td>Returns the base-10 logarithm of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">log2</td>
                <td>Returns the base-2 logarithm of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">mad</td>
                <td>Performs an arithmetic multiply/add operation on three values.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">max</td>
                <td>Selects the greater of x and y.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">min</td>
                <td>Selects the lesser of x and y.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">modf</td>
                <td>Splits the value x into fractional and integer parts.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">msad4</td>
                <td>Compares a 4-byte reference value and an 8-byte source value and accumulates a
                            vector of 4 sums.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">mul</td>
                <td>Performs matrix multiplication using x and y.</td>
                <td>1</td>
                <td class="style1">0.2</td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">noise</td>
                <td>Generates a random value using the Perlin-noise algorithm.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">normalize</td>
                <td>Returns a normalized vector.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">pow</td>
                <td>Returns xy.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">printf</td>
                <td>Submits a custom shader message to the information queue.</td>
                <td>4</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">Process2DQuadTessFactorsAvg</td>
                <td>Generates the corrected tessellation factors for a quad patch.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">Process2DQuadTessFactorsMax</td>
                <td>Generates the corrected tessellation factors for a quad patch.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">Process2DQuadTessFactorsMin</td>
                <td>Generates the corrected tessellation factors for a quad patch.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ProcessIsolineTessFactors</td>
                <td>Generates the rounded tessellation factors for an isoline.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ProcessQuadTessFactorsAvg</td>
                <td>Generates the corrected tessellation factors for a quad patch.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ProcessQuadTessFactorsMax</td>
                <td>Generates the corrected tessellation factors for a quad patch.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ProcessQuadTessFactorsMin</td>
                <td>Generates the corrected tessellation factors for a quad patch.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ProcessTriTessFactorsAvg</td>
                <td>Generates the corrected tessellation factors for a tri patch.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ProcessTriTessFactorsMax</td>
                <td>Generates the corrected tessellation factors for a tri patch.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">ProcessTriTessFactorsMin</td>
                <td>Generates the corrected tessellation factors for a tri patch.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">radians</td>
                <td>Converts x from degrees to radians.</td>
                <td>1</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">rcp</td>
                <td>Calculates a fast, approximate, per-component reciprocal.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">reflect</td>
                <td>Returns a reflection vector.</td>
                <td>1</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">refract</td>
                <td>Returns the refraction vector.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">reversebits</td>
                <td>Reverses the order of the bits, per component.</td>
                <td>5</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">round</td>
                <td>Rounds x to the nearest integer</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">rsqrt</td>
                <td>Returns 1 / sqrt(x)</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">saturate</td>
                <td>Clamps x to the range [0, 1]</td>
                <td>1</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">sign</td>
                <td>Computes the sign of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">sin</td>
                <td>Returns the sine of x</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">sincos</td>
                <td>Returns the sine and cosine of x.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">sinh</td>
                <td>Returns the hyperbolic sine of x</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">smoothstep</td>
                <td>Returns a smooth Hermite interpolation between 0 and 1.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">sqrt</td>
                <td>Square root (per component)</td>
                <td>11</td>
                <td class="style1">0.2</td>
                <td class="style1">0.2.2</td>
            </tr>
            <tr>
                <td class="style3">step</td>
                <td>Returns (x &gt;= a) ? 1 : 0</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tan</td>
                <td>Returns the tangent of x</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tanh</td>
                <td>Returns the hyperbolic tangent of x</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex1D(s, t)</td>
                <td>1D texture lookup.</td>
                <td>1</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex1D(s, t, ddx, ddy)</td>
                <td>1D texture lookup.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex1Dbias</td>
                <td>1D texture lookup with bias.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex1Dgrad</td>
                <td>1D texture lookup with a gradient.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex1Dlod</td>
                <td>1D texture lookup with LOD.</td>
                <td>31</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex1Dproj</td>
                <td>1D texture lookup with projective divide.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex2D(s, t)</td>
                <td>2D texture lookup.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex2D(s, t, ddx, ddy)</td>
                <td>2D texture lookup.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex2Dbias</td>
                <td>2D texture lookup with bias.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex2Dgrad</td>
                <td>2D texture lookup with a gradient.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex2Dlod</td>
                <td>2D texture lookup with LOD.</td>
                <td>3</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex2Dproj</td>
                <td>2D texture lookup with projective divide.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex3D(s, t)</td>
                <td>3D texture lookup.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex3D(s, t, ddx, ddy)</td>
                <td>3D texture lookup.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex3Dbias</td>
                <td>3D texture lookup with bias.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex3Dgrad</td>
                <td>3D texture lookup with a gradient.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex3Dlod</td>
                <td>3D texture lookup with LOD.</td>
                <td>31</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">tex3Dproj</td>
                <td>3D texture lookup with projective divide.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">texCUBE(s, t)</td>
                <td>Cube texture lookup.</td>
                <td>11</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">texCUBE(s, t, ddx, ddy)</td>
                <td>Cube texture lookup.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">texCUBEbias</td>
                <td>Cube texture lookup with bias.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">texCUBEgrad</td>
                <td>Cube texture lookup with a gradient.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">texCUBElod</td>
                <td>Cube texture lookup with LOD.</td>
                <td>31</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">texCUBEproj</td>
                <td>Cube texture lookup with projective divide.</td>
                <td>21</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">transpose</td>
                <td>Returns the transpose of the matrix m.</td>
                <td>1</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            <tr>
                <td class="style3">trunc</td>
                <td>Truncates floating-point value(s) to integer value(s)</td>
                <td>1</td>
                <td class="style1">
                </td>
                <td class="style1">
                </td>
            </tr>
            </tbody>
        </table>
    </div>
</body>

    <script type="text/javascript">
        function initializeRowColor() {
            var body = document.getElementById("body");
            for (var i = 0; i < body.rows.length; i++) {
                body.rows[i].className = (i % 2 == 1) ? "COLOR0" : "COLOR1";
            }
        }
        initializeRowColor();
    </script>

</html>
