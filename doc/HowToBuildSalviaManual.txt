目录说明：

${HOME}		SALVIA源代码的根目录。该目录下应该包含README
${BUILD}	CMake配置及编译的中间目录。
${BIN}		二进制文件的安装目录
${LIB}		二进制库安装目录

${PLATFORM}	目标平台名称。包括ntx86，ntx64, linuxx86, linuxx64等。
${COMPILER}	编译器名称。格式为短名+版本号。
				短名表：
					msvc	Microsoft Visual C++
					mgw		MinGW C++
					icc		Intel C++
					gcc		GCC c++ compiler
			版本号由主版本号，次版本号和修订号构成。
			对于MSVC 2005以上仅使用主版本号。
			Intel C++不显示修订号。
			如果修订号为0，则不显示修订号。
			例:
				MSVC 2005	--> msvc8
				MSVC 2010	--> msvc10
				Mingw 4.5.1	--> mgw451
${CONFIG}	配置选项。CMAKE支持DEBUG/RELEASE/RELWITHDEBINFO/MINSIZEREL四项。
				
${HOME}		: SALVIA及部分第三方库源代码
	3rd_party
		llvm		: LLVM 源代码
		wtl			: WTL源码
		threadpool	: Thead Pool 源码
	bin
		resource				: 资源文件
		${PLATFORM}_${COMPILER}_${CONFIG}	: 最终生成的二进制文件。

Boost的编译：
	* 从project.py获取boost路径至${BOOST}
	* 根据boost路径编译生成bjam至${BOOST}
	* ${BOOST_STAGE_DIRECTORY} = ${LIB}/${BOOST}_${PLATFORM}
	* 使用bjam编译库，并stage至${BOOST_STAGE_DIRECTORY} 中。
	* ${BOOST_LIB_DIRECTORY} = ${BOOST_STAGE_DIRECTORY}/lib
	
LLVM的编译：
	* ${LLVM_BUILD} = ${BUILD}/llvm_{PLATFORM}_${COMPILER}
	* LLVM的编译目录为${LLVM_BUILD}
	* ${LLVM_INSTALL} = ${LIB}/llvm_${PLATFORM}_${COMPILER}_${CONFIG}
	* 使用CMake配置并生成Solution
		LLVM_BOOST_STDINT	= TRUE
		LLVM_BOOST_DIR		= ${BOOST}
		CMAKE_INSTALL_PREFIX= ${LLVM_INSTALL}
	* 编译LLVM
	* 安装LLVM
	
SALVIA的编译：
	* SALVIA的编译目录为 ${BUILD}/salvia_${PLATFORM}_${COMPILER}
	* 使用CMake配置并生成Solution
		SALVIA_BOOST_DIRECTORY	= ${BOOST}
		SALVIA_BOOST_LIB_DIR	= ${BOOST_LIB_DIRECTORY}
		SALVIA_LLVM_INSTALL_PATH= ${LLVM_INSTALL}
		SALVIA_BUILD_WITH_LLVM	= TRUE
		SALVIA_ENABLE_SASL_REGRESSION_TEST = TRUE
		SALVIA_ENABLE_SASL_REGRESSION_TEST = TRUE
	* 编译SALVIA

运行时拷贝：
	* 拷贝3rd_party/FreeImage/bin/${PLATFORM}/FreeImage.dll至${BIN}/${PLATFORM}/${CONFIG}
	* 拷贝boost dynamic libraries至${BIN}/${PLATFORM}/${CONFIG}