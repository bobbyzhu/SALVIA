/**************************
NEVER CHANGE THIS FILE MANUALLY!

This File Was Generated By enums_gen.py Automatically.
************************/

#ifndef SOFTART_ENUMS_LOCK_MODE_H
#define SOFTART_ENUMS_LOCK_MODE_H

#ifdef _DEBUG
#include <set>
#endif

class lock_mode{

#ifdef _DEBUG
	static std::set<int>& get_lock_mode_table();
#endif
	int val;
	explicit lock_mode(int v);
	
public:
	static lock_mode cast(int val);
	
	lock_mode(const lock_mode& rhs):val(rhs.val){}
	
	lock_mode& operator =(const lock_mode& rhs){ val=rhs.val; }
	
	operator int(){ return val; }
	
	friend inline bool operator == (const lock_mode& lhs, const lock_mode& rhs)
	{ return lhs.val == rhs.val; }
	
	friend inline bool operator != (const lock_mode& lhs, const lock_mode& rhs)
	{ return lhs.val != rhs.val; }
	
	static const lock_mode invalid;
	static const lock_mode read_only;
	static const lock_mode write_only;
	static const lock_mode read_write;
	static const lock_mode max;
};

template<class T> T enum_cast(int val);

template<> inline lock_mode enum_cast<lock_mode>(int val){
	return lock_mode::cast(val);
}

#endif