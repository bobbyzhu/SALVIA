/**************************
NEVER CHANGE THIS FILE MANUALLY!

This File Was Generated By enums_gen.py Automatically.
************************/

#ifndef SOFTART_ENUMS_SAMPLER_AXIS_H
#define SOFTART_ENUMS_SAMPLER_AXIS_H

#ifdef _DEBUG
#include <set>
#endif

class sampler_axis{

#ifdef _DEBUG
	static std::set<int>& get_sampler_axis_table();
#endif
	int val;
	explicit sampler_axis(int v);
	
public:
	static sampler_axis cast(int val);
	
	sampler_axis(const sampler_axis& rhs):val(rhs.val){}
	
	sampler_axis& operator =(const sampler_axis& rhs){ val=rhs.val; }
	
	operator int(){ return val; }
	
	friend inline bool operator == (const sampler_axis& lhs, const sampler_axis& rhs)
	{ return lhs.val == rhs.val; }
	
	friend inline bool operator != (const sampler_axis& lhs, const sampler_axis& rhs)
	{ return lhs.val != rhs.val; }
	
	static const sampler_axis invalid;
	static const sampler_axis u;
	static const sampler_axis v;
	static const sampler_axis w;
	static const sampler_axis max;
};

template<class T> T enum_cast(int val);

template<> inline sampler_axis enum_cast<sampler_axis>(int val){
	return sampler_axis::cast(val);
}

#endif