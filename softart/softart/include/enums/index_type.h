/**************************
NEVER CHANGE THIS FILE MANUALLY!

This File Was Generated By enums_gen.py Automatically.
************************/

#ifndef SOFTART_ENUMS_INDEX_TYPE_H
#define SOFTART_ENUMS_INDEX_TYPE_H

#ifdef _DEBUG
#include <set>
#endif

class index_type{

#ifdef _DEBUG
	static std::set<int>& get_index_type_table();
#endif
	int val;
	explicit index_type(int v);
	
public:
	static index_type cast(int val);
	
	index_type(const index_type& rhs):val(rhs.val){}
	
	index_type& operator =(const index_type& rhs){ val=rhs.val; }
	
	operator int(){ return val; }
	
	friend inline bool operator == (const index_type& lhs, const index_type& rhs)
	{ return lhs.val == rhs.val; }
	
	friend inline bool operator != (const index_type& lhs, const index_type& rhs)
	{ return lhs.val != rhs.val; }
	
	static const index_type invalid;
	static const index_type uint16;
	static const index_type uint32;
	static const index_type max;
};

template<class T> T enum_cast(int val);

template<> inline index_type enum_cast<index_type>(int val){
	return index_type::cast(val);
}

#endif