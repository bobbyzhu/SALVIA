/**************************
NEVER CHANGE THIS FILE MANUALLY!

This File Was Generated By enums_gen.py Automatically.
************************/

#ifndef SOFTART_ENUMS_PRIMITIVE_TOPOLOGY_H
#define SOFTART_ENUMS_PRIMITIVE_TOPOLOGY_H

#ifdef _DEBUG
#include <set>
#endif

class primitive_topology{

#ifdef _DEBUG
	static std::set<int>& get_primitive_topology_table();
#endif
	int val;
	explicit primitive_topology(int v);
	
public:
	static primitive_topology cast(int val);
	
	primitive_topology(const primitive_topology& rhs):val(rhs.val){}
	
	primitive_topology& operator =(const primitive_topology& rhs){ val=rhs.val; }
	
	operator int(){ return val; }
	
	friend inline bool operator == (const primitive_topology& lhs, const primitive_topology& rhs)
	{ return lhs.val == rhs.val; }
	
	friend inline bool operator != (const primitive_topology& lhs, const primitive_topology& rhs)
	{ return lhs.val != rhs.val; }
	
	static const primitive_topology invalid;
	static const primitive_topology line_list;
	static const primitive_topology line_strip;
	static const primitive_topology triangle_list;
	static const primitive_topology triangle_fan;
	static const primitive_topology triangle_strip;
	static const primitive_topology max;
};

template<class T> T enum_cast(int val);

template<> inline primitive_topology enum_cast<primitive_topology>(int val){
	return primitive_topology::cast(val);
}

#endif